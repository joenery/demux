#!/bin/bash
#
#Must be run from an Illumina run directory
#

#source ~/bin/demux/configure-bcl2fastq
source "/gale/netapp/home/seq/.bashrc"
source "/gale/netapp/home/seq/bin/demux/demux-constants"
source "/gale/netapp/home/seq/bin/demux/date-time"
source "/gale/netapp/home/seq/bin/demux/submit2q"
source "/gale/netapp/home/seq/bin/demux/var2file"

proc_threads="16"
read_threads="4"
write_threads="4"
MISEQ_PROC="2"
MISEQ_READ="1"
MISEQ_WRITE="1"
vmem="6G"
MISEQ_VMEM="2G"

versity="f" #rsync only fastq
upload="f"  #upload only fastq

usage() {
echo "Usage: demux-run -s /gale/netapp/seq2/illumina_runs/.samplesheets/180709_K00161_0224_AHVMNJBBXX/SampleSheet_180709_K00161_0224.csv -O \"-p 16\""
echo "-s        path to samplesheet file"
echo "-p        number of processing threads. Default: $proc_threads"
echo "-r        number of reading threads. Default: $read_threads"
echo "-w        number of writing threads. Default: $write_threads"
echo "-v        h_vmem to use per proc. Default: $vmem"
echo "-O        additional bcl2fastq options enclosed in quotes"
echo "            \"--use-bases-mask Y26N*,I8N*,N*,Y98N* --ignore-dual-index\" or"
echo "            \"--use-bases-mask Y28N*,I8N*,N*,Y98N* --ignore-dual-index\" for 10x RNA"
echo "            \"--use-bases-mask Y*,I8N*,Y16N*,Y*\" for 10x ATAC"
echo "            \"--tiles s_[2-4]\" to demultiplex lanes 2-4"
echo "            \"--barcode-mismatches 0\""
echo "-b        basemask for running bcl2fastq with 10x libraries. Options:"
echo "            1: v3 kit i7 only (i5 not sequenced)"
echo "            2: v2 kit"
echo "            3: v3 kit"
echo "            4: tt kit"
echo "-m        select cellranger mkfastq script. Options:"
echo "            a: cellranger-atac"
echo "            c: cellranger"
echo "            d: cellranger-dna"
echo "-M        email notice recipients, comma separated list, enclosed in quotes"
#echo "-n        do not backup files"
echo "-e        only cc emails on samplesheet"
#echo "-b        backup bcl to versity and oracle: by default bcls are not backed up"        
echo "-h        display this help message"
}

while getopts ":s:p:r:w:v:O:b:m:M:neh" opt; do #change :s:p:r:w:v:O:b:m:M:nebh
  case $opt in
    s) 
      SAMPLESHEET_PATH=$OPTARG
      ;;
    p)
      proc_threads=$OPTARG
      ;;
    r)
      read_threads=$OPTARG
      ;;
    w)
      write_threads=$OPTARG
      ;;
    v) 
      vmem=$OPTARG
      ;;
    O)
      bclopts=$OPTARG
      ;;
    b)
      bcl2fastq410x=${OPTARG}
      proc_threads="12"
      read_threads="4"
      write_threads="4"
      ;;
    m)
      mkfastq_vers=$OPTARG
      ;;
    M)
      mail_to=$OPTARG
      ;;
    e)
      samplesheet_emails_only="yes"
      ;;
    h) 
      usage
      exit 1
      ;;
    \?)
      echo "Invalid option: -$OPTARG"
      usage
      exit 1
      ;;
  esac
done


#change threads and vmem if MiSeq run
echo `pwd` | grep M00 && echo "MiSeq run detected. Setting threads" && \
  proc_threads="$MISEQ_PROC" && \
  read_threads="$MISEQ_READ" && \
  write_threads="$MISEQ_WRITE" && \
  vmem="$MISEQ_VMEM" 

threads="$(($proc_threads + $read_threads + $write_threads))"

#generate bcl2fastq command line
#if [ ! -z ${mkfastq_vers} ] ; then
if [ ! -z ${mkfastq+x} ]; then
#  if [ -z ${mail_to} ]; then
#    echo "Please enter email addresses separated by commas and enclosed in quotes with the -M option"
#    exit 1
#  fi
  bcl2fastq_commandline=$(demux-commandline -s "$SAMPLESHEET_PATH" -t "$proc_threads" -r "$read_threads" -w "$write_threads" -O "$bclopts" -m "$mkfastq_vers")
#elif [ ! -z ${bcl2fastq410x} ]; then
elif [ ! -z ${bcl2fastq410x+x} ]; then
  bcl2fastq_commandline=$(demux-commandline -s "$SAMPLESHEET_PATH" -t "$proc_threads" -r "$read_threads" -w "$write_threads" -O "$bclopts" -b "$bcl2fastq410x")
else
  bcl2fastq_commandline=$(demux-commandline -s "$SAMPLESHEET_PATH" -t "$proc_threads" -r "$read_threads" -w "$write_threads" -O "$bclopts")
fi

#check demux-commandline script exit status
if [ $(echo $?) -eq 1 ] ; then
  echo "$bcl2fastq_commandline"
  exit 1
fi

echo "$(date_time) INFO: bclopts: $bclopts"
echo "$(date_time) INFO: mkfastqopts: $mkfastqopts"
echo "$(date_time) INFO: Command-line invocation: $bcl2fastq_commandline"

#########################################################################################


#parse variables from bcl2fastq command line,
#write them to config file,
#and source the file for use below
source $(configure-bcl2fastq "$bcl2fastq_commandline") || exit 1

if [ -n $samplesheet_emails_only ]; then 
  cc="$samplesheet_cc"

else
  [ ! -z "$samplesheet_cc" ] && cc="$recipient_cc,$samplesheet_cc" || cc="$recipient_cc"
  [ ! -z "$mail_to" ] &&  [ ! -z "$cc" ] && cc="$cc,$mail_to" || \
  [ ! -z "$mail_to" ] && [ -z "$cc" ] && cc="$mail_to"
fi

var2file "cc" $(echo $config_path)

echo "$(date_time) INFO: Making qsub directory: $qsub_path"

mkdir $qsub_path

cd $qsub_path

echo "$(date_time) INFO: Creating wrapper script $qsub_path/$QSUB_COMMANDS_SCRIPT"

#write bcl2fastq_commandline to commands script
echo "$bcl2fastq_commandline" >> $qsub_path/$QSUB_COMMANDS_SCRIPT

echo "$(date_time) INFO: Submitting job to queue"

echo "$(date_time) INFO: Queue config file $QUEUECONFIG"

if [ "$mkfastq" = true  ] || [ "$mkfastq_dna" = true  ] ; then
  2q -c $QUEUECONFIG -t "$threads" -v "$vmem" #-M "$cc"
  echo "$(date_time) INFO: 2q -c $QUEUECONFIG -t "16" -v "12G"" # -M "$cc""
else
  2q -c $QUEUECONFIG -t "$threads" -v "$vmem" # -M "$cc"
  echo "$(date_time) INFO: 2q -c $QUEUECONFIG -t "$threads" -v "$vmem"" # -M "$cc""
fi

node=$(qstatx | grep "$qsub_dir")

echo $node

jobid="$(echo $node | awk '{print $1}')"
var2file "jobid" $(echo $config_path)

source $config_path

submission_file="$qsub_path/$COMMANDS2SUBMIT"

echo "$(date_time) INFO: $submission_file"

qsub_command=$(cat $submission_file)

echo "$(date_time) INFO: $qsub_command"

#wait for the fastq directory to be created
until [ -d $fastq_path ]; do 
  echo "$(date_time) *********** DO NOT PRESS CTRL-C! **************"
  echo "$(date_time) Waiting 60 seconds for creation of $fastq_path."
  sleep 60 ; 
done ; 

echo "$(date_time) INFO: Writing config files"

#write a file containing bcl_path to the fastq directory
echo $bcl_path >> $fastq_path/$BCL_PATH_FILE

#copy samplesheet to fastq directory
cp $samplesheet_path $fastq_path/$SAMPLESHEET_NAME

#write bcl2fastq_commandline to BCL and Unaligned directory
echo "$bcl2fastq_commandline" >> $fastq_path/$qsub_dir-$FASTQ_COMMAND_FILE
echo "$bcl2fastq_commandline" >> $bcl_path/$qsub_dir-$FASTQ_COMMAND_FILE

#copy xml files to fastq directory
[ -f $bcl_path/RunInfo.xml ] && cp $bcl_path/RunInfo.xml $fastq_path/RunInfo.xml
[ -f $bcl_path/RunParameters.xml ] && cp $bcl_path/RunParameters.xml $fastq_path/RunParameters.xml
[ -f $bcl_path/runParameters.xml ] && cp $bcl_path/runParameters.xml $fastq_path/runParameters.xml 

#node=$(qstatx | grep "${qsub_dir:0:10}")
#node=$(qstatx | grep "$qsub_dir")

#write a file containing the qsub node to the fastq dir
echo "$node" > $fastq_path/"$qsub_dir"-qstat.txt
echo "$node" > $bcl_path/"$qsub_dir"-qstat.txt

#write file containing qsub script to fastq dir
echo "$qsub_command" >$fastq_path/"$qsub_dir"-qsub.txt
echo "$qsub_command" >$bcl_path/"$qsub_dir"-qsub.txt

echo "$(date_time) INFO: Demux Started. Sending notification"

{
  echo -e "Demux Started.\n" 
  echo -e "Command-line invocation:" ; \
  echo -e "$bcl2fastq_commandline\n" ; \
  echo -e "SGE invocation:" ; \
  echo -e "$qsub_command\n" ; \
  echo -e "jobnumber:" ; \
  echo -e "$node\n"
  echo -e "bcl2fastq configuration:" ; \
  echo -e "$configuration"
} | mailx -s "$bcl_path" "$RECIPIENT" # -c "$cc"

#
# loop until demux completes by
# checking log for success

until grep -Eq "$STOPSTR10X|$STOPSTR" $log_path
do
    sleep $pause_demux_comp_check
done

log_message=$(grep -E "$STOPSTR10X|$STOPSTR" $log_path)

if echo $log_message | grep -q $COMPLETESTR ; then

  echo "$log_message"
  
  echo "$(date_time) INFO: Sending demux completion notification."

  sleep 30

  elapsed="$(date -u -d @"$SECONDS" +'%-Hh %-Mm %-Ss')"

  var2file "elapsed" $(echo $config_path)

  demux-completion-notification -c $config_path

  #remove thumbnail images prior to backing up
  echo "$(date_time) INFO: Removing Thumbnail_Images directory if present."
  
  #[ -d "$thumbnail_path" ] && echo "$thumbnail_path detected" && rm -rfv "$thumbnail_path"

  rm -rfv "$thumbnail_path"

  sleep 60

  #echo "$(date_time) INFO: Verifying Thumbnail_Images deletion."

  #ls $thumbnail_path && echo "Unsuccessful removal" || echo "Successfully removed"

#  [ "$backup" = "no" ] && exit 0

  #remove undetermined indices files
#  echo "$(date_time) INFO: Removing Undetermined Indices files."

#  rm $undetermined_path

fi

echo "$(date_time) INFO: Demux complete."

exit 0

exit

#backups
  case $versity in
    bf|fb)
      bcl2versity
      fastq2versity
      ;;
    b)
      bcl2versity
      ;; 
    f)
      fastq2versity
      ;;
    *)
  esac

  case $upload in
    bf|fb)
      bcl2cloud
      fastq2cloud
      ;;
    b)
      bcl2cloud
      ;;
    f)
      fastq2cloud
      ;;
    *)
  esac
 
fi

echo "$(date_time) INFO: Demux complete."

exit 0

